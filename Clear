/*
 * EEPROM Clear and GPS clear
 *
 * Sets all of the bytes of the EEPROM to 0.
 * Please see eeprom_iteration for a more in depth
 * look at how to traverse the EEPROM.
 *
 * This example code is in the public domain.
 */

#include <EEPROM.h>
#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>

Adafruit_GPS GPS(&Serial1);
HardwareSerial mySerial = Serial1;
#define GPSECHO  false
boolean usingInterrupt = false;
void useInterrupt(boolean); // Func prototype keeps Arduino 0023 happy


void setup() {
  // initialize the LED pin as an output.
  pinMode(13, OUTPUT);
  while (!Serial) ;  //wait for serial port on Leonardo
  
  // connect at 115200 so we can read the GPS fast enuf and
  // also spit it out
  Serial.begin(115200);
  Serial.println("Adafruit GPS erase FLASH!");

  // 9600 NMEA is the default baud rate for MTK
  GPS.begin(9600);
  
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_OFF);

  // the nice thing about this code is you can have a timer0 interrupt go off
  // every 1 millisecond, and read data from the GPS for you. that makes the
  // loop code a heck of a lot easier!
  useInterrupt(true);
  
  Serial.println("This code will ERASE the data log stored in the FLASH - Permanently!");
  Serial.print("Are you sure you want to do this? [Y/N]: ");
  while (Serial.read() != 'Y')   delay(10);
  Serial.println("\nERASING! UNPLUG YOUR ARDUINO WITHIN 5 SECONDS IF YOU DIDNT MEAN TO!");
  delay(5000);
  GPS.sendCommand(PMTK_LOCUS_ERASE_FLASH);
  
  for (int i = 0 ; i < EEPROM.length() ; i++) {
    EEPROM.write(i, 0); }
    
  Serial.println("Erased");



  
 

  // turn the LED on when we're done
  digitalWrite(13, HIGH);
}

void loop()
{
   if (mySerial.available()) {
    Serial.write(mySerial.read());  
  }
}


/******************************************************************/
// Interrupt is called once a millisecond, looks for any new GPS data, and stores it
SIGNAL(TIMER0_COMPA_vect)
{
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
  if (GPSECHO && c) {
#ifdef UDR0
    UDR0 = c;  
    // writing direct to UDR0 is much much faster than Serial.print 
    // but only one character can be written at a time. 
#else
    Serial.write(c);
#endif
  }
}

void useInterrupt(boolean v)
{
  if (v) {
    // Timer0 is already used for millis() - we'll just interrupt somewhere
    // in the middle and call the "Compare A" function above
    OCR0A = 0xAF;
    TIMSK0 |= _BV(OCIE0A);
    usingInterrupt = true;
  } else {
    // do not call the interrupt function COMPA anymore
    TIMSK0 &= ~_BV(OCIE0A);
    usingInterrupt = false;
  }
}

